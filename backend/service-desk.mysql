-- Start of the Fully Enhanced MySQL Deployment Script for Service-Desk Application

CREATE DATABASE IF NOT EXISTS itsm;

USE itsm;

-- Departments Table
CREATE TABLE IF NOT EXISTS departments (
    department_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    department_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL
) COMMENT='Stores department details, including a description. Soft delete capability for historical tracking.';

-- Positions Table
CREATE TABLE IF NOT EXISTS positions (
    position_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    position_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    department_id INT UNSIGNED,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
) COMMENT='Detailed information on positions, including department association. Supports soft deletes.';

-- Vendors Table
CREATE TABLE IF NOT EXISTS vendors (
    vendor_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    vendor_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    contact_info TEXT,
    contact_person VARCHAR(255),
    address TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL
) COMMENT='Comprehensive vendor information with contact details. Soft delete functionality enabled.';

-- Categories Table
CREATE TABLE IF NOT EXISTS categories (
    category_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(255) NOT NULL UNIQUE,
    parent_category_id INT UNSIGNED NULL,
    icon VARCHAR(255) NULL,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    FOREIGN KEY (parent_category_id) REFERENCES categories(category_id) ON DELETE SET NULL
) COMMENT='Hierarchical categorization for tickets with icons for UI representation. Includes soft deletes.';

-- Priorities Table
CREATE TABLE IF NOT EXISTS priorities (
    priority_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    color VARCHAR(7) NOT NULL DEFAULT '#FFFFFF',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL
) COMMENT='Defines priority levels for tickets, including a color code for UI distinction. Soft deletes implemented.';

-- Statuses Table
CREATE TABLE IF NOT EXISTS statuses (
    status_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    status_name VARCHAR(255) NOT NULL,
    description TEXT,
    is_closed BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL
) COMMENT='Comprehensive statuses for ticket lifecycle, including descriptions and closure indicators.';

-- Users Table
CREATE TABLE IF NOT EXISTS users (
    user_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20),
    position_id INT UNSIGNED,
    department_id INT UNSIGNED,
    password_hash CHAR(60) NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    profile_pic VARCHAR(255),
    last_login_at TIMESTAMP NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    FOREIGN KEY (department_id) REFERENCES departments(department_id) ON DELETE SET NULL,
    FOREIGN KEY (position_id) REFERENCES positions(position_id) ON DELETE SET NULL
) COMMENT='User profiles with comprehensive details, linked to departments and positions. Includes password hashing for security.';

-- Agents Table
CREATE TABLE IF NOT EXISTS agents (
    agent_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash CHAR(60) NOT NULL,
    phone VARCHAR(20),
    position_id INT UNSIGNED,
    department_id INT UNSIGNED,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    profile_pic VARCHAR(255),
    last_login_at TIMESTAMP NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    FOREIGN KEY (department_id) REFERENCES departments(department_id) ON DELETE SET NULL,
    FOREIGN KEY (position_id) REFERENCES positions(position_id) ON DELETE SET NULL
) COMMENT='Agent accounts for handling tickets. Includes bcrypt-hashed passwords for security.';

CREATE TABLE IF NOT EXISTS asset_types (
    asset_type_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    type_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL
) COMMENT='Defines types of assets managed, facilitating categorization and reporting.';

-- Optimizing Asset Searches by Type and Status
CREATE INDEX idx_assets_type_status ON assets(asset_type VARCHAR(255), status);

-- Assets Table with Partitioning for Performance
CREATE TABLE IF NOT EXISTS assets (
    asset_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_tag VARCHAR(100) NOT NULL UNIQUE,
    asset_name VARCHAR(255) NOT NULL,
    asset_type VARCHAR(255) NOT NULL,
    description TEXT,
    vendor_id INT UNSIGNED,
    purchase_date DATE,
    warranty_expiration DATE,
    status ENUM('Active', 'Maintenance', 'Decommissioned', 'Lost') NOT NULL,
    location VARCHAR(255),
    user_id INT UNSIGNED,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (vendor_id) REFERENCES vendors(vendor_id) ON DELETE SET NULL
) PARTITION BY RANGE COLUMNS(status) (
    PARTITION p_active VALUES LESS THAN (1),
    PARTITION p_maintenance VALUES LESS THAN (2),
    PARTITION p_decommissioned VALUES LESS THAN (3),
    PARTITION p_lost VALUES LESS THAN (4)
) COMMENT='Asset tracking with status-based partitioning for enhanced performance. Includes warranty tracking and vendor associations.';

-- Tickets Table with Comprehensive Fields and Indexing
CREATE TABLE IF NOT EXISTS tickets (
    ticket_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    subject VARCHAR(255) NOT NULL,
    description TEXT,
    category_id INT UNSIGNED,
    priority_id INT UNSIGNED,
    status_id INT UNSIGNED,
    user_id INT UNSIGNED,
    agent_id INT UNSIGNED,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    closed_at TIMESTAMP NULL,
    FOREIGN KEY (category_id) REFERENCES categories(category_id),
    FOREIGN KEY (priority_id) REFERENCES priorities(priority_id),
    FOREIGN KEY (status_id) REFERENCES statuses(status_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)
) COMMENT='Core ticketing table with links to users, agents, categories, priorities, and statuses.';

-- Additional Comprehensive Indexing for Optimized Performance
CREATE INDEX idx_tickets_on_status_priority ON tickets(status_id, priority_id);
CREATE INDEX idx_assets_on_status_vendor ON assets(status, vendor_id);
CREATE INDEX idx_users_on_department_position ON users(department_id, position_id);
CREATE INDEX idx_agents_on_department_position ON agents(department_id, position_id);

CREATE TABLE IF NOT EXISTS incidents (
    incident_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    status ENUM('Open', 'Investigating', 'Resolved', 'Closed') NOT NULL,
    severity ENUM('Low', 'Medium', 'High', 'Critical') NOT NULL,
    reported_by INT UNSIGNED,
    assigned_to INT UNSIGNED,
    category_id INT UNSIGNED,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    closed_at TIMESTAMP NULL,
    FOREIGN KEY (reported_by) REFERENCES users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (assigned_to) REFERENCES agents(agent_id) ON DELETE SET NULL,
    FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE SET NULL
) COMMENT='Tracks incidents reported by users or detected by system monitoring.';

-- Index for optimizing queries on incident status and severity
CREATE INDEX idx_incidents_status_severity ON incidents(status, severity);

CREATE TABLE IF NOT EXISTS incident_comments (
    comment_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    incident_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED,
    comment TEXT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (incident_id) REFERENCES incidents(incident_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS incident_history (
    history_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    incident_id INT UNSIGNED NOT NULL,
    status_changed_to ENUM('Open', 'Investigating', 'Resolved', 'Closed') NOT NULL,
    changed_by INT UNSIGNED,
    change_description TEXT,
    changed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (incident_id) REFERENCES incidents(incident_id) ON DELETE CASCADE,
    FOREIGN KEY (changed_by) REFERENCES users(user_id) ON DELETE SET NULL
);

-- User Roles and Permissions
CREATE TABLE IF NOT EXISTS roles (
    role_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL
) COMMENT='Defines roles within the system for access control.';

-- Teams Table (Assuming teams are a core part of the application)
CREATE TABLE IF NOT EXISTS teams (
    team_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    team_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL
) COMMENT='Stores teams within the organization, facilitating group assignments and notifications.';

-- Team Memberships (Linking users to teams)
CREATE TABLE IF NOT EXISTS team_memberships (
    team_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    role_id INT UNSIGNED NOT NULL, -- Assuming roles can differ within teams
    joined_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(team_id, user_id),
    FOREIGN KEY (team_id) REFERENCES teams(team_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(role_id) ON DELETE CASCADE
) COMMENT='Associates users with teams and specific roles within those teams.';

-- Incorporating Advanced Indexing Strategies
-- For team memberships, indexes on user_id and team_id for fast lookup
CREATE INDEX idx_team_memberships_on_user ON team_memberships(user_id);
CREATE INDEX idx_team_memberships_on_team ON team_memberships(team_id);


CREATE TABLE IF NOT EXISTS permissions (
    permission_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    permission_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL
) COMMENT='Specific permissions that can be granted to roles.';

CREATE TABLE IF NOT EXISTS role_permissions (
    role_id INT UNSIGNED NOT NULL,
    permission_id INT UNSIGNED NOT NULL,
    PRIMARY KEY(role_id, permission_id),
    FOREIGN KEY (role_id) REFERENCES roles(role_id) ON DELETE CASCADE,
    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) ON DELETE CASCADE
) COMMENT='Maps which permissions are granted to each role.';

CREATE TABLE IF NOT EXISTS user_roles (
    user_id INT UNSIGNED NOT NULL,
    role_id INT UNSIGNED NOT NULL,
    PRIMARY KEY(user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(role_id) ON DELETE CASCADE
) COMMENT='Associates users with roles for access control purposes.';

CREATE TABLE IF NOT EXISTS ticket_sla (
    ticket_sla_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    sla_id INT UNSIGNED NOT NULL,
    due_by TIMESTAMP NOT NULL,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (sla_id) REFERENCES service_level_agreements(sla_id) ON DELETE RESTRICT
) COMMENT='Associates tickets with SLAs to track compliance and due dates.';

-- Index for quick SLA compliance checks
CREATE INDEX idx_ticket_slas_due_by ON ticket_slas(due_by);

CREATE TABLE IF NOT EXISTS feedback (
    feedback_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    rating ENUM('Poor', 'Fair', 'Good', 'Excellent') NOT NULL,
    comments TEXT,
    submitted_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Collects user feedback on support experiences, including ratings and comments.';

-- Indexing feedback for reporting and analysis
CREATE INDEX idx_feedback_ticket_user ON feedback(ticket_id, user_id);

CREATE TABLE IF NOT EXISTS reports (
    report_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    report_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    query_template TEXT NOT NULL COMMENT 'Template for generating report, parameters indicated for dynamic substitution',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT='Custom reports defined within the system for analytics and operational insights.';

CREATE TABLE IF NOT EXISTS changes (
    change_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    type ENUM('Standard', 'Emergency', 'Normal') NOT NULL,
    status ENUM('Draft', 'Review', 'Approved', 'Implemented', 'Rejected') NOT NULL,
    impact ENUM('Low', 'Medium', 'High') NOT NULL,
    urgency ENUM('Low', 'Medium', 'High') NOT NULL,
    scheduled_start TIMESTAMP NULL,
    scheduled_end TIMESTAMP NULL,
    actual_start TIMESTAMP NULL,
    actual_end TIMESTAMP NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (impact) REFERENCES priorities(priority_id) ON DELETE SET NULL, -- Mapping impact to priority levels
    FOREIGN KEY (urgency) REFERENCES priorities(priority_id) ON DELETE SET NULL  -- Mapping urgency to priority levels
) COMMENT='Manages changes to IT services, including planning, approval, and implementation, to minimize impact on service quality.';

CREATE TABLE IF NOT EXISTS service_catalog (
    service_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    service_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    category_id INT UNSIGNED,
    availability ENUM('Available', 'Unavailable') NOT NULL DEFAULT 'Available',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE SET NULL
) COMMENT='Catalog of IT services offered to users, including service descriptions and availability.';


-- Knowledge Base for Support Articles
CREATE TABLE IF NOT EXISTS knowledge_base_articles (
    article_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    author_id INT UNSIGNED NOT NULL,
    category_id INT UNSIGNED,
    published BOOLEAN DEFAULT FALSE,
    published_at TIMESTAMP NULL DEFAULT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    FOREIGN KEY (author_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE SET NULL
) COMMENT='Knowledge base articles for self-service and support.';

CREATE TABLE IF NOT EXISTS knowledge_base_article_views (
    view_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    article_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    view_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (article_id) REFERENCES knowledge_base_articles(article_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Tracks views of knowledge base articles by users.';

CREATE TABLE IF NOT EXISTS user_forum_posts (
    post_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    thread_id INT UNSIGNED NOT NULL,
    content TEXT NOT NULL,
    posted_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
    -- Add a FOREIGN KEY for thread_id once the threads table is defined
) COMMENT='Stores forum posts made by users, facilitating community discussions.';

-- Audit Log for User Activities
CREATE TABLE IF NOT EXISTS audit_logs (
    log_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    action ENUM('Created', 'Updated', 'Deleted', 'Logged In', 'Logged Out'),
    entity_type VARCHAR(255),
    entity_id BIGINT UNSIGNED,
    details TEXT,
    ip_address VARCHAR(45),
    performed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL
)COMMENT='Logs user activities for security and auditing.';


-- SLA Management
CREATE TABLE IF NOT EXISTS sla (
    sla_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    sla_name VARCHAR(255) NOT NULL,
    description TEXT,
    response_time INT UNSIGNED COMMENT 'Response time in hours',
    resolution_time INT UNSIGNED COMMENT 'Resolution time in hours',
    target_response_time INT NOT NULL COMMENT 'Target response time in minutes',
    target_resolution_time INT NOT NULL COMMENT 'Target resolution time in hours',
    active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL
) COMMENT='Service level agreements for ticket response and resolution times.';

-- Additional Comprehensive Indexing
CREATE INDEX idx_audit_logs_on_user_action ON audit_logs(user_id, action);
CREATE INDEX idx_knowledge_base_articles_on_published ON knowledge_base_articles(published);

-- Additional User Management Features
CREATE TABLE IF NOT EXISTS user_preferences (
    user_id INT UNSIGNED NOT NULL,
    preference_key VARCHAR(255) NOT NULL,
    preference_value TEXT NOT NULL,
    PRIMARY KEY (user_id, preference_key),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
)COMMENT='Stores individual user preferences for application customization.';


-- Indexing for Audit Logs and SLA Management for Quick Access and Reporting
CREATE INDEX idx_audit_logs_on_user_action ON audit_logs(user_id, action_type);
CREATE INDEX idx_ticket_slas_on_due_by ON ticket_slas(due_by);

-- Advanced Ticket Management Features
CREATE TABLE IF NOT EXISTS ticket_history (
    history_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    status_id INT UNSIGNED NOT NULL,
    changed_by INT UNSIGNED NOT NULL,
    change_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (status_id) REFERENCES statuses(status_id) ON DELETE CASCADE,
    FOREIGN KEY (changed_by) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Tracks changes in ticket status for auditing and workflow automation.';

-- Feedback Mechanisms for Tickets and Service Requests to Enhance Quality of Service
CREATE TABLE IF NOT EXISTS ticket_feedback (
    feedback_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    rating ENUM('Poor', 'Fair', 'Good', 'Excellent') NOT NULL,
    comments TEXT,
    submitted_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Enhanced Security Features
CREATE TABLE IF NOT EXISTS user_sessions (
    session_id VARCHAR(255) PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    session_start TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_access TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    ip_address VARCHAR(45),
    session_data BLOB,
    token VARCHAR(255) NOT NULL UNIQUE,
    is_active BOOLEAN DEFAULT TRUE,
    expires_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Tracks active user sessions for security monitoring and user experience enhancements.';

CREATE TABLE IF NOT EXISTS user_activity_logs (
    log_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    activity_type VARCHAR(255) NOT NULL,
    details TEXT,
    performed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS problems (
    problem_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    status ENUM('Open', 'Investigating', 'Resolved', 'Closed') NOT NULL,
    impact ENUM('Low', 'Medium', 'High') NOT NULL,
    urgency ENUM('Low', 'Medium', 'High') NOT NULL,
    category_id INT UNSIGNED,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    closed_at TIMESTAMP NULL DEFAULT NULL,
    FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE SET NULL
) COMMENT='Tracks problems identified within the IT infrastructure, facilitating root cause analysis and resolution.';

-- 
-- --
-- -- --
-- -- -- --
-- -- -- -- --

-- SLA Management Enhancements
CREATE TABLE IF NOT EXISTS sla_metrics (
    sla_metric_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    target_response_time INT UNSIGNED NOT NULL COMMENT 'Time in hours',
    target_resolution_time INT UNSIGNED NOT NULL COMMENT 'Time in hours',
    active BOOLEAN NOT NULL DEFAULT TRUE
) COMMENT='Defines specific SLA metrics that can be applied to tickets or service requests.';

CREATE TABLE IF NOT EXISTS ticket_sla_metrics (
    ticket_id INT UNSIGNED NOT NULL,
    sla_metric_id INT UNSIGNED NOT NULL,
    compliance_status ENUM('Compliant', 'Violated') NOT NULL,
    actual_response_time INT UNSIGNED,
    actual_resolution_time INT UNSIGNED,
    PRIMARY KEY (ticket_id, sla_metric_id),
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (sla_metric_id) REFERENCES sla_metrics(sla_metric_id) ON DELETE RESTRICT
) COMMENT='Tracks SLA compliance for each ticket against defined SLA metrics.';

-- Assuming the use of application-level encryption for sensitive fields
ALTER TABLE user_sessions ADD COLUMN session_data BLOB;


ALTER TABLE knowledge_base_articles ADD FULLTEXT(fulltext_index)(title, content);

-- Assuming the use of application-level encryption for sensitive fields
ALTER TABLE user_sessions ADD COLUMN session_data BLOB;


-- Optimizing the Users Table
-- Assuming email and login activities are frequent operations
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_last_login ON users(last_login_at);

-- Optimizing the Tickets Table for Query Performance
-- Composite index for frequently accessed ticket views
CREATE INDEX idx_tickets_on_user_status ON tickets(user_id, status_id);
-- Index for quickly filtering tickets by priority and status for reporting and dashboards
CREATE INDEX idx_tickets_priority_status ON tickets(priority_id, status_id);

-- Optimizing Assets for Fast Retrieval in Maintenance or Audit Queries
CREATE INDEX idx_assets_status ON assets(status);
CREATE INDEX idx_assets_purchase_date ON assets(purchase_date);

-- Indexing for change management for quick access to changes by status and type
CREATE INDEX idx_changes_on_status_type ON changes(status, type);

CREATE TABLE IF NOT EXISTS service_requests (
    request_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    service_id INT UNSIGNED NOT NULL,
    request_description TEXT,
    status ENUM('New', 'Pending', 'Completed', 'Cancelled') NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (service_id) REFERENCES service_catalog(service_id) ON DELETE RESTRICT
) COMMENT='Tracks individual requests for services cataloged in the service catalog.';

CREATE TABLE IF NOT EXISTS service_request_comments (
    comment_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    request_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED,
    comment TEXT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (request_id) REFERENCES service_requests(request_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS service_request_feedback (
    feedback_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    request_id INT UNSIGNED NOT NULL,
    rating TINYINT UNSIGNED NOT NULL COMMENT 'Rating scale from 1 to 5',
    comment TEXT,
    submitted_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (request_id) REFERENCES service_requests(request_id) ON DELETE CASCADE
) COMMENT='Collects feedback from users on completed service requests to gauge satisfaction and areas for improvement.';

-- Enhancements
ALTER TABLE service_requests
ADD COLUMN sla_id INT UNSIGNED,
ADD FOREIGN KEY (sla_id) REFERENCES sla(sla_id);

CREATE TABLE IF NOT EXISTS projects (
    project_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    project_name VARCHAR(255) NOT NULL,
    description TEXT,
    start_date DATE,
    end_date DATE,
    status ENUM('Active', 'Completed', 'Paused', 'Cancelled') NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT='Manages projects within the service-desk application, including timelines and statuses.';

CREATE TABLE IF NOT EXISTS project_tasks (
    task_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    project_id INT UNSIGNED NOT NULL,
    task_name VARCHAR(255) NOT NULL,
    description TEXT,
    status ENUM('Not Started', 'In Progress', 'Completed', 'Blocked') NOT NULL,
    priority ENUM('Low', 'Medium', 'High') NOT NULL,
    due_date DATE,
    assigned_to INT UNSIGNED,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES projects(project_id) ON DELETE CASCADE,
    FOREIGN KEY (assigned_to) REFERENCES users(user_id) ON DELETE SET NULL
) COMMENT='Defines tasks within projects, including assignments and due dates.';

CREATE TABLE IF NOT EXISTS project_members (
    project_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    role VARCHAR(255) NOT NULL,
    PRIMARY KEY (project_id, user_id),
    FOREIGN KEY (project_id) REFERENCES projects(project_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Associates users with projects and defines their roles within those projects.';

-- Asset Lifecycle Management
CREATE TABLE IF NOT EXISTS asset_disposals (
    disposal_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    disposal_date DATE NOT NULL,
    method ENUM('Sold', 'Recycled', 'Donated', 'Disposed') NOT NULL,
    notes TEXT,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id) ON DELETE CASCADE
) COMMENT='Tracks the disposal of assets, including the method and any relevant notes.';

CREATE TABLE IF NOT EXISTS asset_warranties (
    warranty_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    provider VARCHAR(255) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    coverage_details TEXT,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id) ON DELETE CASCADE
) COMMENT='Stores warranty details for assets, including coverage information.';

-- User Interaction Tracking
CREATE TABLE IF NOT EXISTS user_actions (
    action_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    action_type VARCHAR(255) NOT NULL,
    description TEXT,
    action_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Logs actions taken by users within the system for audit and behavioral analysis.';

-- Ticket Interaction Enhancements
CREATE TABLE IF NOT EXISTS ticket_comments (
    comment_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    comment TEXT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Stores comments made on tickets by users or agents for collaborative resolution.';

-- Further Indexing for Performance Optimization
CREATE INDEX idx_project_members_on_user_id ON project_members(user_id);
CREATE INDEX idx_ticket_sla_metrics_on_compliance ON ticket_sla_metrics(compliance_status);
CREATE INDEX idx_user_actions_on_action_type ON user_actions(action_type);
CREATE INDEX idx_ticket_comments_on_ticket_id ON ticket_comments(ticket_id);

CREATE TABLE IF NOT EXISTS task_time_entries (
    time_entry_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    task_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    hours_logged DECIMAL(5,2) NOT NULL,
    log_date DATE NOT NULL,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (task_id) REFERENCES project_tasks(task_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Tracks time logged by users against specific tasks for billing or productivity analysis.';

CREATE TABLE IF NOT EXISTS user_feedback (
    feedback_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    rating TINYINT UNSIGNED NOT NULL COMMENT 'Rating scale 1-5',
    comment TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Collects feedback from users on service tickets for quality assessment.';

CREATE TABLE IF NOT EXISTS sla_policies (
    sla_policy_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    policy_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    response_time INT UNSIGNED COMMENT 'Response time in hours',
    resolution_time INT UNSIGNED COMMENT 'Resolution time in hours',
    applicable_to ENUM('ALL', 'VIP', 'ENTERPRISE') NOT NULL DEFAULT 'ALL',
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) COMMENT='Defines SLA policies for different tiers of service requests or incidents.';

CREATE TABLE IF NOT EXISTS sla_policies (
    sla_policy_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    policy_name VARCHAR(255) NOT NULL UNIQUE,
    target_response_time INT UNSIGNED,
    target_resolution_time INT UNSIGNED,
    applicable_entities ENUM('Ticket', 'Incident', 'Both'),
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS sla_compliance (
    compliance_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED,
    sla_policy_id INT UNSIGNED,
    met_response_time BOOLEAN,
    met_resolution_time BOOLEAN,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (sla_policy_id) REFERENCES sla_policies(sla_policy_id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS sla_violations (
    violation_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED,
    sla_policy_id INT UNSIGNED,
    violation_type ENUM('Response Time', 'Resolution Time'),
    occurred_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (sla_policy_id) REFERENCES sla_policies(sla_policy_id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS escalation_rules (
    rule_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    rule_name VARCHAR(255) NOT NULL UNIQUE,
    trigger_condition TEXT NOT NULL COMMENT 'JSON format for trigger conditions',
    action TEXT NOT NULL COMMENT 'JSON format for actions to be taken',
    priority ENUM('LOW', 'MEDIUM', 'HIGH') NOT NULL,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) COMMENT='Defines rules for automatically escalating tickets based on certain conditions.';

CREATE TABLE IF NOT EXISTS escalation_log (
    log_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    rule_id INT UNSIGNED NOT NULL,
    escalated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),
    FOREIGN KEY (rule_id) REFERENCES escalation_rules(rule_id)
) COMMENT='Records instances of ticket escalations triggered by escalation rules.';

-- Project Stakeholders
CREATE TABLE IF NOT EXISTS project_stakeholders (
    stakeholder_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    project_id INT UNSIGNED NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    role VARCHAR(255) NOT NULL COMMENT 'Role of the stakeholder in the project',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES projects(project_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Defines stakeholders for each project, including their roles.';

-- Indexes for Project Management
CREATE INDEX idx_project_stakeholders_project_user ON project_stakeholders(project_id, user_id);

-- Detailed Audit Trails
CREATE TABLE IF NOT EXISTS audit_trails (
    audit_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    action_type ENUM('CREATE', 'UPDATE', 'DELETE') NOT NULL,
    entity_type VARCHAR(255) NOT NULL COMMENT 'Type of entity affected',
    entity_id INT UNSIGNED NOT NULL COMMENT 'ID of the affected entity',
    user_id INT UNSIGNED,
    details TEXT COMMENT 'JSON-encoded string of the action details',
    performed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL
) COMMENT='Logs detailed audit trails for critical actions performed within the system.';

-- Indexes for Audit Trails
CREATE INDEX idx_audit_trails_on_action_entity ON audit_trails(action_type, entity_type, entity_id);

-- User Security Profiles
CREATE TABLE IF NOT EXISTS user_security_profiles (
    profile_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL UNIQUE,
    security_questions JSON COMMENT 'JSON-encoded security questions and hashed answers',
    additional_security_measures TEXT COMMENT 'Other security measures metadata',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Stores additional security profiles for users, including security questions and other measures.';

-- Security Incident Reporting
CREATE TABLE IF NOT EXISTS security_incidents (
    incident_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    impact_level ENUM('LOW', 'MEDIUM', 'HIGH', 'CRITICAL') NOT NULL,
    detected_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP NULL,
    status ENUM('OPEN', 'INVESTIGATING', 'RESOLVED') NOT NULL DEFAULT 'OPEN'
) COMMENT='Logs security incidents detected within the system, including their impact level, status, and resolution.';

-- Table Partitioning Example for Audit Trails
ALTER TABLE audit_trails PARTITION BY RANGE(YEAR(performed_at)) (
    PARTITION p2020 VALUES LESS THAN (2021),
    PARTITION p2021 VALUES LESS THAN (2022),
    PARTITION p2022 VALUES LESS THAN (2023),
    PARTITION p2023 VALUES LESS THAN (2024),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- Query Optimization through Materialized Views (Emulated through Regular Tables and Triggers)
CREATE TABLE IF NOT EXISTS user_activity_summary (
    user_id INT UNSIGNED NOT NULL,
    last_activity TIMESTAMP NOT NULL,
    total_actions INT UNSIGNED NOT NULL DEFAULT 0,
    PRIMARY KEY (user_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='A summary table that emulates a materialized view, aggregating user activities for faster retrieval.';

CREATE TABLE IF NOT EXISTS ticket_attachments (
    attachment_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    file_path VARCHAR(255) NOT NULL COMMENT 'Path to the stored file',
    file_name VARCHAR(255) NOT NULL COMMENT 'Original name of the file',
    content_type VARCHAR(50) NOT NULL COMMENT 'MIME type of the file',
    size BIGINT UNSIGNED NOT NULL COMMENT 'Size of the file in bytes',
    uploaded_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE
) COMMENT='Stores metadata about files attached to tickets.';

CREATE TABLE IF NOT EXISTS ticket_audit_history (
    audit_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    changed_by INT UNSIGNED NOT NULL COMMENT 'User ID of who made the change',
    change_description TEXT NOT NULL COMMENT 'Description of what was changed',
    changed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (changed_by) REFERENCES users(user_id) ON DELETE SET NULL
) COMMENT='Logs changes to tickets for auditing and tracking purposes.';

CREATE TABLE IF NOT EXISTS asset_assignments (
    assignment_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    assigned_to_user_id INT UNSIGNED COMMENT 'User ID of the asset assignee',
    assigned_from TIMESTAMP NOT NULL COMMENT 'When the assignment started',
    assigned_until TIMESTAMP NULL COMMENT 'When the assignment ends',
    reason TEXT,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id) ON DELETE CASCADE,
    FOREIGN KEY (assigned_to_user_id) REFERENCES users(user_id) ON DELETE SET NULL
) COMMENT='Tracks which assets are assigned to which users and for how long.';

CREATE TABLE IF NOT EXISTS asset_maintenance_records (
    maintenance_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    maintenance_type VARCHAR(255) NOT NULL COMMENT 'Routine, Repair, etc.',
    description TEXT,
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NULL,
    cost DECIMAL(10,2) NULL COMMENT 'Cost of maintenance',
    outcome ENUM('SUCCESS', 'FAILURE', 'PARTIAL') NOT NULL,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id) ON DELETE CASCADE
) COMMENT='Logs maintenance activities for assets to track their upkeep and repair history.';

-- Dynamic Fields for Tickets (Assuming dynamic field requirements based on structs analysis)
CREATE TABLE IF NOT EXISTS ticket_dynamic_fields (
    field_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    field_name VARCHAR(255) NOT NULL,
    field_value TEXT,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE
);

-- Enhancing indexing for optimized query performance on frequently accessed columns
CREATE INDEX idx_incidents_status_severity ON incidents(status, severity);
CREATE INDEX idx_service_requests_status ON service_requests(status);
CREATE INDEX idx_api_keys_user_active ON api_keys(user_id, active);
CREATE INDEX idx_session_tokens_expires_at ON session_tokens(expires_at);

-- Ticket Attachments
CREATE INDEX idx_ticket_attachments_on_ticket ON ticket_attachments(ticket_id);

-- Ticket Audit History
CREATE INDEX idx_ticket_audit_history_on_ticket ON ticket_audit_history(ticket_id);

-- Asset Assignments
CREATE INDEX idx_asset_assignments_on_asset_user ON asset_assignments(asset_id, assigned_to_user_id);

-- Asset Maintenance Records
CREATE INDEX idx_asset_maintenance_records_on_asset ON asset_maintenance_records(asset_id);

-- Service Requests
CREATE INDEX idx_service_requests_on_status ON service_requests(status);

-- Service Request Feedback
CREATE INDEX idx_service_request_feedback_on_request ON service_request_feedback(request_id);

-- Enhanced User Management
CREATE TABLE IF NOT EXISTS user_security_questions (
    question_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    question VARCHAR(255) NOT NULL,
    answer_hash VARCHAR(255) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Security questions for user account recovery.';

CREATE TABLE IF NOT EXISTS password_reset_tokens (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    token VARCHAR(255) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Tokens for managing password resets.';

-- Incident Management Enhancements
CREATE TABLE IF NOT EXISTS incident_categories (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT
) COMMENT='Categories for organizing incidents.';

-- Asset Management Enhancements
CREATE TABLE IF NOT EXISTS asset_maintenance_records (
    maintenance_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    maintenance_type VARCHAR(255) NOT NULL,
    start_date DATE,
    end_date DATE,
    cost DECIMAL(10,2),
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id) ON DELETE CASCADE
)COMMENT='Records for asset maintenance activities.';

-- Session Management Enhancements
CREATE TABLE IF NOT EXISTS user_sessions (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    session_token VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Tracks user sessions for enhanced security.';

CREATE TABLE IF NOT EXISTS session_tokens (
    token_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    session_id VARCHAR(255) NOT NULL,
    user_id INT UNSIGNED NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Audit Logging
CREATE TABLE IF NOT EXISTS audit_events (
    event_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    action_type ENUM('Created', 'Updated', 'Deleted') NOT NULL,
    entity_type VARCHAR(255) NOT NULL,
    entity_id BIGINT UNSIGNED,
    event_details TEXT,
    event_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL
) COMMENT='Audit log for tracking user actions on entities.';

-- Service Request Management Enhancements
CREATE TABLE IF NOT EXISTS service_request_statuses (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT
) COMMENT='Possible statuses for service requests to facilitate workflow management.';

CREATE TABLE IF NOT EXISTS webhook_subscriptions (
    subscription_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    callback_url VARCHAR(255) NOT NULL,
    event_trigger ENUM('TICKET_CREATED', 'TICKET_UPDATED', 'TICKET_CLOSED') NOT NULL,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Allows users to subscribe to specific events within the application and receive callbacks.';

CREATE TABLE IF NOT EXISTS api_keys (
    api_key_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    api_key VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NULL,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Stores API keys for users to interact with the service desk application programmatically.';

CREATE TABLE IF NOT EXISTS api_access_tokens (
    token_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    token VARCHAR(255) NOT NULL UNIQUE,
    expires_at TIMESTAMP NOT NULL,
    scope VARCHAR(255) NOT NULL, -- Defines the scope of access
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Stores API access tokens with scope and expiration for external integrations.';

-- 
-- --
-- -- --
-- -- -- --
-- -- -- -- --

CREATE TABLE IF NOT EXISTS user_access_tokens (
    token_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    access_token VARCHAR(255) NOT NULL UNIQUE,
    token_type ENUM('Bearer', 'API', 'OAuth') NOT NULL,
    expires_at DATETIME NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Stores access tokens for users for API access or third-party integrations.';


-- Authentication --
CREATE TABLE IF NOT EXISTS users_login_credentials (
  id SERIAL PRIMARY KEY,
  username VARCHAR(255) NOT NULL UNIQUE,
  password_hash VARCHAR(255) NOT NULL,
  password_salt VARCHAR(255) NOT NULL,
  user_id INT NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  DeletedAt  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON DELETE CURRENT_TIMESTAMP,
  CONSTRAINT fk_users_login_credentials_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Indexes:
CREATE INDEX idx_users_login_credentials_username ON users_login_credentials (username);
CREATE INDEX idx_users_login_credentials_user_id ON users_login_credentials (user_id);



CREATE TABLE IF NOT EXISTS agent_login_credentials (
  id SERIAL PRIMARY KEY,
  username VARCHAR(255) NOT NULL UNIQUE,
  password_hash VARCHAR(255) NOT NULL,
  password_salt VARCHAR(255) NOT NULL,
  agent_id INT NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  DeletedAt  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON DELETE CURRENT_TIMESTAMP,
  CONSTRAINT fk_agent_login_credentials_agent_id FOREIGN KEY (agent_id) REFERENCES agents(agent_id) ON DELETE CASCADE
)COMMENT='Authentication credentials for users.';

-- Indexes:
CREATE INDEX idx_agent_login_credentials_username ON agent_login_credentials (username);
CREATE INDEX idx_agent_login_credentials_agent_id ON agent_login_credentials (agent_id);

-- Session Management
CREATE TABLE IF NOT EXISTS user_sessions (
    session_id CHAR(36) PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='User session management with expiration.';

-- Service Requests Enhancements
ALTER TABLE service_requests ADD COLUMN priority ENUM('Low', 'Medium', 'High') NOT NULL DEFAULT 'Low';
ALTER TABLE service_requests ADD COLUMN resolution_date TIMESTAMP NULL;

-- Incident Management Enhancements
ALTER TABLE incidents ADD COLUMN category_id INT UNSIGNED;
ALTER TABLE incidents ADD FOREIGN KEY (category_id) REFERENCES categories(category_id);


CREATE TABLE IF NOT EXISTS password_reset_requests (
  id SERIAL PRIMARY KEY,
  user_id INT NOT NULL,
  request_id INT NOT NULL UNIQUE,
  token VARCHAR(255) NOT NULL UNIQUE,
  expiration_time TIMESTAMP,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  DeletedAt  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON DELETE CURRENT_TIMESTAMP,
  CONSTRAINT fk_password_reset_requests_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Indexes:
CREATE INDEX idx_password_reset_requests_user_id ON password_reset_requests (user_id);
CREATE INDEX idx_password_reset_requests_token ON password_reset_requests (token);
CREATE INDEX idx_password_reset_requests_expiration_time ON password_reset_requests (expiration_time);


CREATE TABLE IF NOT EXISTS password_history (
  id SERIAL PRIMARY KEY,
  user_id INT NOT NULL,
  password VARCHAR(255) NOT NULL,
  date_changed TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_password_history_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Indexes:
CREATE INDEX idx_password_history_user_id ON password_history (user_id);
CREATE INDEX idx_password_history_date_changed ON password_history (date_changed);

CREATE INDEX idx_service_requests_status ON service_requests(status);
CREATE INDEX idx_projects_status ON projects(status);
CREATE INDEX idx_project_tasks_status_priority ON project_tasks(status, priority);
CREATE INDEX idx_task_time_entries_log_date ON task_time_entries(log_date);
CREATE INDEX idx_user_access_tokens_expires_at ON user_access_tokens(expires_at);

ALTER TABLE users
ADD COLUMN two_factor_enabled BOOLEAN DEFAULT FALSE AFTER is_active,
ADD COLUMN two_factor_secret VARCHAR(255) AFTER two_factor_enabled;

ALTER TABLE tickets
ADD COLUMN escalation_level TINYINT UNSIGNED DEFAULT 0 AFTER status_id,
ADD COLUMN related_service_request_id INT UNSIGNED AFTER ticket_id,
ADD CONSTRAINT FK_related_service_request FOREIGN KEY (related_service_request_id) REFERENCES service_requests(request_id) ON DELETE SET NULL;

CREATE INDEX idx_user_feedback_on_ticket_user ON user_feedback(ticket_id, user_id);
CREATE INDEX idx_sla_violations_on_occurred_at ON sla_violations(occurred_at);
CREATE INDEX idx_api_keys_on_expires_at_user_id ON api_keys(expires_at, user_id);

-- SLA Policies and Violations
CREATE INDEX idx_sla_violations_on_ticket_sla ON sla_violations(ticket_id, sla_policy_id);

-- Escalation Procedures
CREATE INDEX idx_escalation_log_on_ticket_rule ON escalation_log(ticket_id, rule_id);

-- Integration Capabilities
CREATE INDEX idx_api_keys_on_user ON api_keys(user_id);
CREATE INDEX idx_webhook_subscriptions_on_event_trigger ON webhook_subscriptions(event_trigger);

-- Customizable User Views for Tickets
CREATE TABLE IF NOT EXISTS user_custom_views (
    view_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    view_name VARCHAR(255) NOT NULL,
    filters JSON NOT NULL COMMENT 'JSON-encoded string of view filters',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Allows users to create and save custom views for tickets based on specified filters.';

-- Dynamic Form Fields for Ticket Submission
CREATE TABLE IF NOT EXISTS dynamic_form_fields (
    field_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    field_name VARCHAR(255) NOT NULL,
    field_type ENUM('Text', 'Number', 'Date', 'Select', 'Checkbox'),
    options TEXT COMMENT 'JSON array for select options, applicable only for select field type',
    active BOOLEAN NOT NULL DEFAULT TRUE,
    field_label VARCHAR(255),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
)COMMENT='Defines dynamic fields that can be included in ticket submission forms, allowing for customizable data collection.';

CREATE TABLE IF NOT EXISTS dynamic_form_values (
    value_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    field_id INT UNSIGNED NOT NULL,
    entity_id INT UNSIGNED NOT NULL,
    entity_type ENUM('Ticket', 'Incident', 'Asset'),
    value TEXT,
    FOREIGN KEY (field_id) REFERENCES dynamic_form_fields(field_id) ON DELETE CASCADE
)COMMENT='Defines dynamic fields that can be included in ticket submission forms, allowing for customizable data collection.';

-- Enhanced Indexing for Performance Optimization and Quick Access
CREATE INDEX idx_user_notifications_on_user_read ON user_notifications(user_id, read_status);
CREATE INDEX idx_ticket_feedback_on_ticket_user ON ticket_feedback(ticket_id, user_id);
CREATE INDEX idx_service_request_feedback_on_request_user ON service_request_feedback(request_id, user_id);
CREATE INDEX idx_asset_disposals_on_asset ON asset_disposals(asset_id);
CREATE INDEX idx_asset_maintenance_on_asset_date ON asset_maintenance(asset_id, maintenance_date);

CREATE TABLE IF NOT EXISTS dashboard_widgets (
    widget_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    widget_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT
) COMMENT='Defines available widgets that can be added to customizable user dashboards.';

CREATE TABLE IF NOT EXISTS user_dashboard_layouts (
    layout_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    widget_id INT UNSIGNED NOT NULL,
    position JSON NOT NULL COMMENT 'JSON-encoded position and size',
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (widget_id) REFERENCES dashboard_widgets(widget_id) ON DELETE CASCADE
) COMMENT='Stores the layout of dashboard widgets for each user.';


-- System-wide Notifications
CREATE TABLE IF NOT EXISTS system_notifications (
    notification_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    target_group ENUM('All Users', 'Agents', 'Administrators') NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) COMMENT='Stores system-wide notifications for different groups of users within the service desk application.';

-- User Notifications for Keeping Users Informed of Important Events
CREATE TABLE IF NOT EXISTS user_notifications (
    notification_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    read_status BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- User Notification Settings
CREATE TABLE IF NOT EXISTS user_notification_settings (
    setting_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    notify_on_new_ticket BOOLEAN NOT NULL DEFAULT TRUE,
    notify_on_ticket_assignment BOOLEAN NOT NULL DEFAULT TRUE,
    notify_on_ticket_update BOOLEAN NOT NULL DEFAULT TRUE,
    custom_notifications JSON NULL COMMENT 'JSON-encoded string for user-specific notification settings',
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Stores user-specific notification preferences for various events within the service desk application.';

CREATE TABLE IF NOT EXISTS notifications (
    notification_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    read BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) COMMENT='Manages notifications for users, including read status.';


-- Detailed Audit Trails for System Changes
CREATE TABLE IF NOT EXISTS system_audit_trails (
    audit_trail_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    action VARCHAR(255) NOT NULL,
    entity_type VARCHAR(255) NOT NULL,
    entity_id BIGINT UNSIGNED,
    details TEXT NOT NULL COMMENT 'Detailed description of the action performed',
    performed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL
) COMMENT='Logs detailed audit trails for actions performed by users, including changes to system configurations and entities.';

-- Advanced Configuration for SLA Management
CREATE TABLE IF NOT EXISTS sla_configuration (
    config_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    sla_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    applicable_to ENUM('Tickets', 'Service Requests', 'Both') NOT NULL,
    priority_level ENUM('Low', 'Medium', 'High', 'Critical') NOT NULL,
    response_time INT UNSIGNED NOT NULL COMMENT 'Time in minutes',
    resolution_time INT UNSIGNED NOT NULL COMMENT 'Time in hours',
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) COMMENT='Advanced configurations for SLA policies, defining response and resolution times based on priority levels and applicable entities.';

-- Indexing for Performance Optimization and Quick Lookups
CREATE INDEX idx_user_custom_views_on_user_id ON user_custom_views(user_id);
CREATE INDEX idx_dynamic_form_fields_on_active ON dynamic_form_fields(active);
CREATE INDEX idx_system_notifications_on_target_group ON system_notifications(target_group);
CREATE INDEX idx_user_notification_settings_on_user_id ON user_notification_settings(user_id);
CREATE INDEX idx_system_audit_trails_on_user_action ON system_audit_trails(user_id, action);
CREATE INDEX idx_sla_configuration_on_priority_level ON sla_configuration(priority_level);

CREATE TABLE IF NOT EXISTS custom_field_definitions (
    field_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    field_name VARCHAR(255) NOT NULL,
    field_type ENUM('text', 'number', 'date', 'boolean', 'select') NOT NULL,
    applicable_to ENUM('ticket', 'user') NOT NULL,
    options TEXT, -- JSON array for 'select' type
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT='Defines custom fields for tickets or users, including field type and options for select fields.';

CREATE TABLE IF NOT EXISTS custom_field_values (
    field_id INT UNSIGNED NOT NULL,
    entity_id INT UNSIGNED NOT NULL, -- ticket_id or user_id depending on applicable_to
    value TEXT,
    FOREIGN KEY (field_id) REFERENCES custom_field_definitions(field_id) ON DELETE CASCADE,
    PRIMARY KEY (field_id, entity_id)
) COMMENT='Stores values for custom fields, applicable to either tickets or users.';

ALTER TABLE audit_logs ADD COLUMN operation_type ENUM('CREATE', 'READ', 'UPDATE', 'DELETE') NOT NULL;


CREATE TABLE IF NOT EXISTS configuration_settings (
    setting_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    setting_key VARCHAR(255) NOT NULL UNIQUE,
    setting_value TEXT NOT NULL,
    description TEXT,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT='Stores configurable settings for the service desk application.';


CREATE TABLE IF NOT EXISTS asset_locations (
    location_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    location VARCHAR(255) NOT NULL,
    start_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    end_date TIMESTAMP NULL,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id) ON DELETE CASCADE
) COMMENT='Tracks the history of asset locations over time.';

CREATE TABLE IF NOT EXISTS asset_lifecycle_events (
    event_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    event_type ENUM('Acquisition', 'Maintenance', 'Decommission', 'Disposal') NOT NULL,
    event_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    description TEXT,
    cost DECIMAL(10,2),
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id) ON DELETE CASCADE
) COMMENT='Logs significant lifecycle events for assets.';

-- Enhancements to the Fully Enhanced MySQL Deployment Script for Service-Desk Application

-- Optimizing data types and adding ENUM where beneficial
ALTER TABLE statuses MODIFY COLUMN is_closed TINYINT(1) NOT NULL DEFAULT 0;
ALTER TABLE assets MODIFY COLUMN status ENUM('Active', 'Maintenance', 'Decommissioned', 'Lost') NOT NULL;
ALTER TABLE incidents MODIFY COLUMN status ENUM('Open', 'Investigating', 'Resolved', 'Closed') NOT NULL;
ALTER TABLE incidents MODIFY COLUMN severity ENUM('Low', 'Medium', 'High', 'Critical') NOT NULL;
ALTER TABLE user_sessions MODIFY COLUMN is_active TINYINT(1) DEFAULT TRUE;

-- Adding missing indexes and optimizing existing ones for performance
CREATE INDEX idx_users_on_email ON users(email);
CREATE INDEX idx_users_on_last_login ON users(last_login_at);
CREATE INDEX idx_tickets_on_user_id ON tickets(user_id);
CREATE INDEX idx_tickets_on_agent_id ON tickets(agent_id);
CREATE INDEX idx_assets_on_user_id ON assets(user_id);
CREATE INDEX idx_assets_on_vendor_id ON assets(vendor_id);

-- Adding foreign keys where missing to ensure referential integrity
ALTER TABLE ticket_comments ADD FOREIGN KEY (user_id) REFERENCES users(user_id);
ALTER TABLE ticket_comments ADD FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id);

-- Adjusting session management for enhanced security and performance
ALTER TABLE user_sessions ADD COLUMN user_agent VARCHAR(255);
ALTER TABLE user_sessions ADD COLUMN session_end TIMESTAMP NULL;

-- Normalizing the database by removing redundant fields and using relation tables
-- Note: Actual SQL commands for normalization would depend on the current schema and data. 
-- This might involve creating new tables for many-to-many relationships, 
-- moving redundant data to separate tables, and updating application logic to handle these changes.

-- Refactoring the asset management to include a lifecycle event log for comprehensive tracking
CREATE TABLE IF NOT EXISTS asset_events (
    event_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    event_type ENUM('Acquisition', 'Maintenance', 'Decommission', 'Disposal', 'Transfer') NOT NULL,
    event_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    description TEXT,
    cost DECIMAL(10, 2),
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
);

-- Enhancing user and role management with additional granularity and control
ALTER TABLE roles ADD COLUMN role_type ENUM('System', 'Custom') NOT NULL DEFAULT 'Custom';
CREATE INDEX idx_roles_on_type ON roles(role_type);

-- Streamlining the SLA management to accommodate dynamic SLA metrics
ALTER TABLE sla_metrics MODIFY COLUMN target_response_time INT UNSIGNED NOT NULL;
ALTER TABLE sla_metrics MODIFY COLUMN target_resolution_time INT UNSIGNED NOT NULL;
CREATE INDEX idx_sla_metrics_on_active ON sla_metrics(active);

-- Implementing dynamic form fields and values for flexible ticket and asset data capture
DROP TABLE IF EXISTS ticket_dynamic_fields; -- Assuming decision to normalize or refactor
DROP TABLE IF EXISTS dynamic_form_values; -- Assuming decision to normalize or refactor

-- Committing all schema changes
COMMIT;

-- Note: This script assumes that appropriate backup, migration strategies are in place, and all changes are tested in a development environment before being applied to production. 
-- Specific SQL commands for data migration or transformation (as required by normalization efforts) are not included and must be designed based on the current database state.
-- Further enhancements and optimizations

-- Service Request Enhancements for better tracking and categorization
ALTER TABLE service_requests ADD COLUMN category_id INT UNSIGNED;
ALTER TABLE service_requests ADD FOREIGN KEY (category_id) REFERENCES categories(category_id);
ALTER TABLE service_requests MODIFY COLUMN status ENUM('New', 'Pending', 'Completed', 'Cancelled') NOT NULL;
CREATE INDEX idx_service_requests_on_category_id ON service_requests(category_id);

-- Refining the Tickets Table with additional fields for tracking and management
ALTER TABLE tickets ADD COLUMN impact ENUM('Low', 'Medium', 'High', 'Critical') NULL;
ALTER TABLE tickets ADD COLUMN urgency ENUM('Low', 'Medium', 'High', 'Critical') NULL;
CREATE INDEX idx_tickets_on_impact_urgency ON tickets(impact, urgency);

-- Asset Management refinements for better lifecycle and warranty tracking
ALTER TABLE asset_warranties ADD COLUMN warranty_status ENUM('Active', 'Expired') NOT NULL DEFAULT 'Active';
CREATE INDEX idx_asset_warranties_on_status ON asset_warranties(warranty_status);

-- User Management Enhancements for better role and access control
ALTER TABLE user_roles ADD COLUMN access_level ENUM('Read', 'Write', 'Admin') NOT NULL DEFAULT 'Read';
CREATE INDEX idx_user_roles_on_access_level ON user_roles(access_level);

-- Implementing comprehensive audit logs for tracking changes across the system
ALTER TABLE audit_logs MODIFY COLUMN action ENUM('Created', 'Updated', 'Deleted', 'Viewed') NOT NULL;
CREATE INDEX idx_audit_logs_on_action_entity_type ON audit_logs(action, entity_type);

-- Optimizing Incident Management with structured categorization and tracking
ALTER TABLE incidents ADD COLUMN root_cause_analysis TEXT;
ALTER TABLE incidents ADD COLUMN resolution_summary TEXT;

-- Enhancing SLA Management with detailed tracking and compliance metrics
ALTER TABLE sla_policies ADD COLUMN sla_compliance_threshold DECIMAL(5, 2) NOT NULL DEFAULT 95.00;
CREATE INDEX idx_sla_policies_on_compliance_threshold ON sla_policies(sla_compliance_threshold);

-- Adjusting User Sessions for improved tracking and security
ALTER TABLE user_sessions ADD COLUMN device_info TEXT;
ALTER TABLE user_sessions ADD COLUMN location_info TEXT;

-- Adding Custom Fields for users to support flexible data storage
CREATE TABLE IF NOT EXISTS user_custom_fields (
    field_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    field_key VARCHAR(255) NOT NULL,
    field_value TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_user_custom_fields_on_user_id ON user_custom_fields(user_id);

-- Enforcing stricter security and data integrity measures
ALTER TABLE api_keys ADD COLUMN revoked TINYINT(1) NOT NULL DEFAULT 0;
ALTER TABLE api_access_tokens ADD COLUMN revoked TINYINT(1) NOT NULL DEFAULT 0;
CREATE INDEX idx_api_keys_on_revoked ON api_keys(revoked);
CREATE INDEX idx_api_access_tokens_on_revoked ON api_access_tokens(revoked);

-- Final Commit to apply all changes
COMMIT;

-- Reminder: Execute these changes in a controlled environment first. Ensure backups are taken and a detailed plan for data migration, where necessary, is prepared and tested.

-- Enhancing the Tickets Table for better SLA tracking and performance analysis
ALTER TABLE tickets 
  ADD COLUMN sla_breach TINYINT(1) NOT NULL DEFAULT 0,
  ADD COLUMN time_to_resolution INT UNSIGNED,
  ADD COLUMN time_to_first_response INT UNSIGNED;
CREATE INDEX idx_tickets_on_sla_breach ON tickets(sla_breach);

-- Introducing a table for tracking ticket escalations for audit and performance review
CREATE TABLE IF NOT EXISTS ticket_escalations (
    escalation_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    escalated_by INT UNSIGNED,
    escalation_reason VARCHAR(255),
    escalation_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),
    FOREIGN KEY (escalated_by) REFERENCES users(user_id)
);
CREATE INDEX idx_ticket_escalations_on_ticket_id ON ticket_escalations(ticket_id);

-- Adding a comprehensive feedback system for both tickets and service requests
CREATE TABLE IF NOT EXISTS feedback_details (
    feedback_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    entity_id INT UNSIGNED NOT NULL,
    entity_type ENUM('Ticket', 'ServiceRequest') NOT NULL,
    rating INT NOT NULL,
    comments TEXT,
    submitted_by INT UNSIGNED,
    submitted_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (submitted_by) REFERENCES users(user_id)
);
CREATE INDEX idx_feedback_details_on_entity_type_entity_id ON feedback_details(entity_type, entity_id);

-- Refining the Asset Management System with location tracking and history
CREATE TABLE IF NOT EXISTS asset_location_history (
    history_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    previous_location TEXT,
    new_location TEXT,
    moved_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    moved_by INT UNSIGNED,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id),
    FOREIGN KEY (moved_by) REFERENCES users(user_id)
);
CREATE INDEX idx_asset_location_history_on_asset_id ON asset_location_history(asset_id);

-- Implementing a table for storing detailed change requests for auditing purposes
CREATE TABLE IF NOT EXISTS change_requests (
    change_request_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    requested_by INT UNSIGNED NOT NULL,
    request_status ENUM('New', 'Approved', 'Rejected', 'Implemented') NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (requested_by) REFERENCES users(user_id)
);
CREATE INDEX idx_change_requests_on_request_status ON change_requests(request_status);

-- Extending the User Table to include additional contact and preference information
ALTER TABLE users 
  ADD COLUMN alternate_email VARCHAR(255),
  ADD COLUMN locale VARCHAR(10) DEFAULT 'en-US',
  ADD COLUMN timezone VARCHAR(40) DEFAULT 'UTC';
CREATE INDEX idx_users_on_locale ON users(locale);
CREATE INDEX idx_users_on_timezone ON users(timezone);

-- 
-- --
-- -- --
-- -- -- --
-- -- -- -- --

-- Adding a table for system-wide configurations to manage application settings dynamically
CREATE TABLE IF NOT EXISTS system_configurations (
    config_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    config_key VARCHAR(255) NOT NULL UNIQUE,
    config_value TEXT NOT NULL,
    last_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Introducing API rate limiting configurations for better resource management
CREATE TABLE IF NOT EXISTS api_rate_limiting (
    rate_limit_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    endpoint VARCHAR(255) NOT NULL,
    limit SMALLINT UNSIGNED NOT NULL,
    reset_interval SMALLINT UNSIGNED NOT NULL COMMENT 'Interval in seconds',
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_api_rate_limiting_on_user_id_endpoint ON api_rate_limiting(user_id, endpoint);

-- Note: The execution of these enhancements should follow a well-planned migration strategy to ensure data integrity and system availability. Considerations should include backup processes, testing phases, and rollback plans.
-- Implementing User Activity Logging for Enhanced Audit and Security
CREATE TABLE IF NOT EXISTS user_activity_logs (
    activity_log_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    activity_type ENUM('Login', 'Logout', 'Update', 'Delete', 'Create'),
    activity_details TEXT,
    activity_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_user_activity_logs_on_user_id ON user_activity_logs(user_id);
CREATE INDEX idx_user_activity_logs_on_activity_type ON user_activity_logs(activity_type);

-- Enhancing the Ticketing System with Automated Assignment Logic
CREATE TABLE IF NOT EXISTS ticket_assignment_rules (
    rule_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    rule_name VARCHAR(255) NOT NULL,
    criteria JSON NOT NULL,
    assigned_team_id INT UNSIGNED,
    assigned_user_id INT UNSIGNED,
    FOREIGN KEY (assigned_team_id) REFERENCES teams(team_id),
    FOREIGN KEY (assigned_user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_ticket_assignment_rules_on_assigned_team_id ON ticket_assignment_rules(assigned_team_id);
CREATE INDEX idx_ticket_assignment_rules_on_assigned_user_id ON ticket_assignment_rules(assigned_user_id);

-- Creating a Table for Storing Document Attachments Across Entities
CREATE TABLE IF NOT EXISTS document_attachments (
    document_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    related_entity_id INT UNSIGNED NOT NULL,
    related_entity_type ENUM('Ticket', 'ServiceRequest', 'User', 'Asset'),
    document_path VARCHAR(255) NOT NULL,
    document_type VARCHAR(50),
    uploaded_by INT UNSIGNED,
    uploaded_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (uploaded_by) REFERENCES users(user_id)
);
CREATE INDEX idx_document_attachments_on_related_entity_id ON document_attachments(related_entity_id, related_entity_type);

-- Introducing a Comprehensive Table for Managing all Notifications
CREATE TABLE IF NOT EXISTS all_notifications (
    notification_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    notification_type ENUM('System', 'User', 'Ticket', 'Asset'),
    target_user_id INT UNSIGNED,
    notification_content TEXT,
    is_read BOOLEAN NOT NULL DEFAULT FALSE,
    sent_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (target_user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_all_notifications_on_target_user_id ON all_notifications(target_user_id);
CREATE INDEX idx_all_notifications_on_is_read ON all_notifications(is_read);

-- Adding Support for Multi-factor Authentication (MFA)
ALTER TABLE users ADD COLUMN mfa_enabled BOOLEAN NOT NULL DEFAULT FALSE;
ALTER TABLE users ADD COLUMN mfa_secret VARCHAR(255);

-- Setting up a Table for Scheduled Reports and Analytics
CREATE TABLE IF NOT EXISTS scheduled_reports (
    report_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    report_name VARCHAR(255) NOT NULL,
    report_criteria JSON,
    schedule_cron_expression VARCHAR(255) NOT NULL,
    last_run_at TIMESTAMP,
    next_run_at TIMESTAMP,
    created_by INT UNSIGNED,
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);
CREATE INDEX idx_scheduled_reports_on_next_run_at ON scheduled_reports(next_run_at);

-- Strengthening Data Integrity with Additional Foreign Keys and Constraints
-- Example: Ensuring all ticket categories are valid and exist in the categories table
ALTER TABLE tickets ADD CONSTRAINT FK_tickets_category_id FOREIGN KEY (category_id) REFERENCES categories(category_id);
-- Similarly, apply foreign key constraints to other relevant fields across tables for maintaining data integrity.

-- Note: Execution of these schema changes and additions should follow thorough planning, with careful attention to migration scripts for existing data, and extensive testing to ensure compatibility and performance. 

-- Project Management Enhancements
CREATE TABLE IF NOT EXISTS project_details (
    project_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    project_name VARCHAR(255) NOT NULL,
    project_description TEXT,
    start_date DATE,
    end_date DATE,
    status ENUM('Planning', 'In Progress', 'Completed', 'On Hold', 'Cancelled'),
    project_manager_id INT UNSIGNED,
    FOREIGN KEY (project_manager_id) REFERENCES users(user_id)
);
CREATE INDEX idx_project_details_on_status ON project_details(status);
CREATE INDEX idx_project_details_on_project_manager_id ON project_details(project_manager_id);

-- SLA Tracking Improvements
CREATE TABLE IF NOT EXISTS sla_breaches (
    breach_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED,
    sla_type ENUM('Response Time', 'Resolution Time'),
    breach_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    resolved BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)
);
CREATE INDEX idx_sla_breaches_on_ticket_id ON sla_breaches(ticket_id);
CREATE INDEX idx_sla_breaches_on_resolved ON sla_breaches(resolved);

-- Enhanced Audit Logging for All Entities
CREATE TABLE IF NOT EXISTS enhanced_audit_logs (
    log_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    action_type ENUM('Create', 'Read', 'Update', 'Delete'),
    entity_type VARCHAR(255),
    entity_id BIGINT UNSIGNED,
    log_details TEXT,
    log_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_enhanced_audit_logs_on_user_id ON enhanced_audit_logs(user_id);
CREATE INDEX idx_enhanced_audit_logs_on_entity_type ON enhanced_audit_logs(entity_type);

-- Introducing Configuration Management for Dynamic Settings
CREATE TABLE IF NOT EXISTS application_settings (
    setting_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    setting_key VARCHAR(255) NOT NULL UNIQUE,
    setting_value TEXT,
    last_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Advanced User Profiles for More Comprehensive Data
ALTER TABLE users ADD COLUMN bio TEXT;
ALTER TABLE users ADD COLUMN linkedin_url VARCHAR(255);
ALTER TABLE users ADD COLUMN github_url VARCHAR(255);

-- Adding Asset Tracking and Management Features
CREATE TABLE IF NOT EXISTS asset_history (
    history_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    status_change ENUM('Assigned', 'Returned', 'Repaired', 'Decommissioned'),
    change_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    notes TEXT,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
);
CREATE INDEX idx_asset_history_on_asset_id ON asset_history(asset_id);

-- User Access and Permission Management
CREATE TABLE IF NOT EXISTS user_access_logs (
    access_log_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    access_type ENUM('Login Success', 'Login Failure', 'Logout', 'MFA Challenge'),
    access_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ip_address VARCHAR(45),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_user_access_logs_on_user_id ON user_access_logs(user_id);

-- Implementing Feature Flags for Controlled Rollouts
CREATE TABLE IF NOT EXISTS feature_flags (
    flag_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    flag_key VARCHAR(255) NOT NULL UNIQUE,
    is_enabled BOOLEAN NOT NULL DEFAULT FALSE,
    enabled_for JSON COMMENT 'List of user IDs for whom the feature is enabled'
);

-- Enhanced Data Analytics for User Interactions
CREATE TABLE IF NOT EXISTS user_interaction_metrics (
    metric_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    interaction_type VARCHAR(255),
    interaction_count INT UNSIGNED NOT NULL DEFAULT 0,
    last_interaction TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_user_interaction_metrics_on_user_id ON user_interaction_metrics(user_id);
CREATE INDEX idx_user_interaction_metrics_on_interaction_type ON user_interaction_metrics(interaction_type);

-- Security Measures: API Rate Limiting
CREATE TABLE IF NOT EXISTS api_rate_limiting (
    rate_limit_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    endpoint VARCHAR(255),
    limit_count INT UNSIGNED,
    reset_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_api_rate_limiting_on_user_id_endpoint ON api_rate_limiting(user_id, endpoint);

-- User Engagement: Gamification and Badges
CREATE TABLE IF NOT EXISTS user_badges (
    badge_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    badge_name VARCHAR(255),
    awarded_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_user_badges_on_user_id ON user_badges(user_id);

-- Implementing a Tagging System for Tickets and Knowledge Base Articles
CREATE TABLE IF NOT EXISTS tags (
    tag_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    tag_name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS ticket_tags (
    ticket_id INT UNSIGNED NOT NULL,
    tag_id INT UNSIGNED NOT NULL,
    PRIMARY KEY (ticket_id, tag_id),
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),
    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)
);

CREATE TABLE IF NOT EXISTS article_tags (
    article_id INT UNSIGNED NOT NULL,
    tag_id INT UNSIGNED NOT NULL,
    PRIMARY KEY (article_id, tag_id),
    FOREIGN KEY (article_id) REFERENCES knowledge_base_articles(article_id),
    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)
);

-- Multi-Factor Authentication (MFA) Settings for Enhanced Security
ALTER TABLE users ADD COLUMN mfa_enabled BOOLEAN NOT NULL DEFAULT FALSE;
ALTER TABLE users ADD COLUMN mfa_secret VARCHAR(255);

-- Structuring Feedback for Continuous Improvement
CREATE TABLE IF NOT EXISTS service_feedback (
    feedback_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    service_request_id INT UNSIGNED,
    rating INT UNSIGNED NOT NULL,
    comments TEXT,
    submitted_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (service_request_id) REFERENCES service_requests(request_id)
);

-- Support for Scheduled Maintenance and Outages
CREATE TABLE IF NOT EXISTS scheduled_maintenance (
    maintenance_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    status ENUM('Scheduled', 'In Progress', 'Completed', 'Cancelled')
);


-- Advanced Reporting: Aggregated Metrics for Dashboard
CREATE TABLE IF NOT EXISTS dashboard_metrics (
    metric_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    metric_name VARCHAR(255) NOT NULL UNIQUE,
    metric_value DECIMAL(10, 2),
    last_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- System Configuration Settings for Admins
CREATE TABLE IF NOT EXISTS system_configurations (
    config_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    config_key VARCHAR(255) NOT NULL UNIQUE,
    config_value VARCHAR(255),
    description TEXT,
    last_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Proactive Incident Management: Automated Monitoring Alerts
CREATE TABLE IF NOT EXISTS monitoring_alerts (
    alert_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    source VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    severity ENUM('Informational', 'Warning', 'Critical') NOT NULL,
    detected_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- User Task Management for Agents
CREATE TABLE IF NOT EXISTS agent_tasks (
    task_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    agent_id INT UNSIGNED NOT NULL,
    task_description TEXT NOT NULL,
    due_date DATE,
    status ENUM('Pending', 'In Progress', 'Completed', 'Overdue') NOT NULL DEFAULT 'Pending',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)
);
CREATE INDEX idx_agent_tasks_on_agent_id_status ON agent_tasks(agent_id, status);

-- Customer Satisfaction Surveys for Closed Tickets
CREATE TABLE IF NOT EXISTS satisfaction_surveys (
    survey_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT UNSIGNED NOT NULL,
    satisfaction_level ENUM('Very Unsatisfied', 'Unsatisfied', 'Neutral', 'Satisfied', 'Very Satisfied'),
    comments TEXT,
    submitted_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)
);
CREATE INDEX idx_satisfaction_surveys_on_ticket_id ON satisfaction_surveys(ticket_id);

-- Asset Tracking: Asset Movement Logs
CREATE TABLE IF NOT EXISTS asset_movements (
    movement_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    from_location VARCHAR(255),
    to_location VARCHAR(255),
    movement_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    reason TEXT,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
);
CREATE INDEX idx_asset_movements_on_asset_id ON asset_movements(asset_id);

-- Audit Trails for Configuration Changes
CREATE TABLE IF NOT EXISTS configuration_audit_logs (
    audit_log_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    config_key VARCHAR(255) NOT NULL,
    previous_value VARCHAR(255),
    new_value VARCHAR(255),
    changed_by INT UNSIGNED,
    changed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (changed_by) REFERENCES users(user_id)
);
CREATE INDEX idx_configuration_audit_logs_on_config_key ON configuration_audit_logs(config_key);

-- Note: Implementation of these enhancements should be done with careful planning, especially around data migration and system testing. Always ensure backward compatibility and minimal downtime during the deployment of these new features to the production environment.


-- Project Resource Allocation
CREATE TABLE IF NOT EXISTS project_resources (
    resource_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    project_id INT UNSIGNED NOT NULL,
    resource_name VARCHAR(255) NOT NULL,
    resource_type ENUM('Human', 'Technical', 'Financial'),
    allocation_percentage DECIMAL(5, 2) COMMENT 'Percentage of time/resource allocated to the project',
    start_date DATE,
    end_date DATE,
    FOREIGN KEY (project_id) REFERENCES projects(project_id)
);
CREATE INDEX idx_project_resources_on_project_id ON project_resources(project_id);

-- Detailed User Profiles
CREATE TABLE IF NOT EXISTS user_profiles (
    profile_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL UNIQUE,
    bio TEXT,
    skills TEXT COMMENT 'JSON array of skills',
    interests TEXT COMMENT 'JSON array of interests',
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Advanced Access Control: Role-Based Access Control (RBAC) Enhancements
CREATE TABLE IF NOT EXISTS rbac_permissions (
    permission_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    permission_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT
);

CREATE TABLE IF NOT EXISTS rbac_role_permissions (
    role_id INT UNSIGNED NOT NULL,
    permission_id INT UNSIGNED NOT NULL,
    PRIMARY KEY (role_id, permission_id),
    FOREIGN KEY (role_id) REFERENCES roles(role_id),
    FOREIGN KEY (permission_id) REFERENCES rbac_permissions(permission_id)
);

-- Service Catalog Enhancement: Service Dependencies
CREATE TABLE IF NOT EXISTS service_dependencies (
    service_id INT UNSIGNED NOT NULL,
    dependent_service_id INT UNSIGNED NOT NULL,
    PRIMARY KEY (service_id, dependent_service_id),
    FOREIGN KEY (service_id) REFERENCES service_catalog(service_id),
    FOREIGN KEY (dependent_service_id) REFERENCES service_catalog(service_id)
);

-- Enhanced Ticketing System: Ticket Dependencies for Complex Issues
CREATE TABLE IF NOT EXISTS ticket_dependencies (
    ticket_id INT UNSIGNED NOT NULL,
    dependent_ticket_id INT UNSIGNED NOT NULL,
    PRIMARY KEY (ticket_id, dependent_ticket_id),
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),
    FOREIGN KEY (dependent_ticket_id) REFERENCES tickets(ticket_id)
);

-- User Action Logging for Comprehensive Activity Tracking
CREATE TABLE IF NOT EXISTS user_action_logs (
    action_log_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    action_type VARCHAR(255) NOT NULL,
    action_description TEXT,
    action_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_user_action_logs_on_user_id ON user_action_logs(user_id);

-- Advanced Configuration: Feature Flags
CREATE TABLE IF NOT EXISTS feature_flags (
    flag_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    flag_key VARCHAR(255) NOT NULL UNIQUE,
    is_enabled BOOLEAN NOT NULL DEFAULT FALSE,
    description TEXT
);

-- Note: As with any database changes, careful consideration should be given to the impact on existing functionalities. Testing in a staging environment before deployment to production is crucial to ensure data integrity and system stability.
-- Advanced Reporting Capabilities
CREATE TABLE IF NOT EXISTS report_definitions (
    report_definition_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    report_name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    query TEXT NOT NULL COMMENT 'SQL query for generating the report',
    parameters JSON COMMENT 'JSON-encoded parameters for the report',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Detailed Incident Management
CREATE TABLE IF NOT EXISTS incident_updates (
    update_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    incident_id INT UNSIGNED NOT NULL,
    update_text TEXT NOT NULL,
    updated_by INT UNSIGNED NOT NULL,
    update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (incident_id) REFERENCES incidents(incident_id),
    FOREIGN KEY (updated_by) REFERENCES users(user_id)
);

-- Comprehensive Asset Tracking
CREATE TABLE IF NOT EXISTS asset_tracking (
    tracking_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    location VARCHAR(255) NOT NULL,
    status ENUM('In Use', 'In Maintenance', 'In Storage', 'Retired'),
    update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
);
CREATE INDEX idx_asset_tracking_on_asset_id ON asset_tracking(asset_id);

-- User Training Records (for managing user training on various tools/services)
CREATE TABLE IF NOT EXISTS user_training_records (
    training_record_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED NOT NULL,
    training_topic VARCHAR(255) NOT NULL,
    completion_date DATE,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE INDEX idx_user_training_records_on_user_id ON user_training_records(user_id);

-- Asset Maintenance Scheduling
CREATE TABLE IF NOT EXISTS asset_maintenance_schedule (
    schedule_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    scheduled_start TIMESTAMP NOT NULL,
    scheduled_end TIMESTAMP NOT NULL,
    maintenance_type VARCHAR(255) NOT NULL COMMENT 'Planned, Unplanned, etc.',
    notes TEXT,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
);
CREATE INDEX idx_asset_maintenance_schedule_on_asset_id ON asset_maintenance_schedule(asset_id);

-- Integration with External Services (e.g., Cloud Services)
CREATE TABLE IF NOT EXISTS external_service_integrations (
    integration_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    service_name VARCHAR(255) NOT NULL UNIQUE,
    api_key VARCHAR(255) NOT NULL,
    integration_config JSON NOT NULL COMMENT 'JSON-encoded configuration for the integration',
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    last_sync TIMESTAMP NULL COMMENT 'Timestamp of the last successful synchronization'
);

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- -- -- -- --                                              -- -- -- -- --
-- -- -- --                                                    -- -- -- --
-- -- --                                                          -- -- --
-- --                                                                -- --
--                                                                      --
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --


-- Note: This script extends the capabilities of the service desk system to include advanced reporting, more detailed incident management, comprehensive asset tracking, and user training management. It also lays the groundwork for integrating external services, providing a platform for future expansions and integrations.

-- Note: It's critical to ensure that all new tables and modifications are thoroughly tested in a controlled environment before deploying them to production. Additionally, consider implementing backup strategies and data migration plans to safeguard against data loss during the upgrade process.


-- End of Enhanced Script
